{"/home/travis/build/npmtest/node-npmtest-slush-angular/test.js":"/* istanbul instrument in package npmtest_slush_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slush-angular/lib.npmtest_slush_angular.js":"/* istanbul instrument in package npmtest_slush_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_slush_angular = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_slush_angular = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-slush-angular/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-slush-angular && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_slush_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_slush_angular\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_slush_angular.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_slush_angular.rollup.js'] =\n            local.assetsDict['/assets.npmtest_slush_angular.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_slush_angular.__dirname + '/lib.npmtest_slush_angular.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slush-angular/node_modules/slush-angular/slushfile.js":"var gulp = require('gulp'),\n    install = require('gulp-install'),\n    conflict = require('gulp-conflict'),\n    template = require('gulp-template'),\n    rename = require('gulp-rename'),\n    inquirer = require('inquirer'),\n    _ = require('underscore.string');\n\nvar cssTypeData = {\n  'less': {\n    plugin: 'gulp-less',\n    pluginVersion: '^1.2.3',\n    pipeCommand: 'g.less()',\n    extension: 'less'\n  },\n  'sass': {\n    plugin: 'gulp-sass',\n    pluginVersion: '^0.7.1',\n    pipeCommand: 'g.sass()',\n    extension: 'scss'\n  },\n  'styl': {\n    plugin: 'gulp-stylus',\n    pluginVersion: '^1.0.2',\n    pipeCommand: 'g.stylus({use: [require(\\'nib\\')()]})',\n    extension: 'styl',\n    extraDependencies: {\n      'nib': '^1.0.2'\n    }\n  }\n};\n\ngulp.task('default', function (done) {\n  inquirer.prompt([\n    {type: 'input', name: 'name', message: 'What do you want to name your AngularJS app?', default: getNameProposal()},\n    {type: 'list', name: 'csstype', message: 'What CSS preprocessor do you want to use?', default: 'styl', choices: [\n      {name: 'Stylus', value: 'styl'},\n      {name: 'LESS', value: 'less'},\n      {name: 'Sass', value: 'sass'}\n    ]},\n    {type: 'confirm', name: 'coffee', message: 'Do you want to use CoffeeScript in your app?', default: false},\n    {type: 'confirm', name: 'example', message: 'Do you want to include a Todo List example in your app?', default: true}\n  ],\n  function (answers) {\n    answers.nameDashed = _.slugify(answers.name);\n    answers.modulename = _.camelize(answers.nameDashed);\n    var files = [__dirname + '/templates/**'];\n    if (answers.coffee) {\n      files.push('!' + __dirname + '/templates/src/**/*.js')\n    }\n    else {\n      files.push('!' + __dirname + '/templates/src/**/*.coffee')\n    }\n    if (!answers.example) {\n      files.push('!' + __dirname + '/templates/src/app/todo/**');\n    }\n    answers.styleData = cssTypeData[answers.csstype];\n    return gulp.src(files)\n      .pipe(template(answers))\n      .pipe(rename(function (file) {\n        if (file.extname === '.css') {\n          file.extname = '.' + answers.styleData.extension;\n        } else if (file.basename[0] === '_') {\n          file.basename = '.' + file.basename.slice(1);\n        }\n      }))\n      .pipe(conflict('./'))\n      .pipe(gulp.dest('./'))\n      .pipe(install())\n      .on('finish', function () {\n        done();\n      });\n  });\n});\n\nfunction getNameProposal () {\n  var path = require('path');\n  try {\n    return require(path.join(process.cwd(), 'package.json')).name;\n  } catch (e) {\n    return path.basename(process.cwd());\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-slush-angular/node_modules/slush-angular/templates/gulpfile.js":"/* jshint node: true */\n'use strict';\n\nvar gulp = require('gulp'),\n    g = require('gulp-load-plugins')({lazy: false}),\n    noop = g.util.noop,\n    es = require('event-stream'),\n    bowerFiles = require('main-bower-files'),\n    rimraf = require('rimraf'),\n    queue = require('streamqueue'),\n    lazypipe = require('lazypipe'),\n    stylish = require('jshint-stylish'),\n    bower = require('./bower'),\n    isWatching = false;\n\nvar htmlminOpts = {\n  removeComments: true,\n  collapseWhitespace: true,\n  removeEmptyAttributes: false,\n  collapseBooleanAttributes: true,\n  removeRedundantAttributes: true\n};\n\n/**\n * JS Hint\n */\ngulp.task('jshint', function () {\n  return gulp.src([\n    './gulpfile.js',\n    './src/app/**/*.js'\n  ])\n    .pipe(g.cached('jshint'))\n    .pipe(jshint('./.jshintrc'))\n    .pipe(livereload());\n});\n\n/**\n * CSS\n */\ngulp.task('clean-css', function (done) {\n  rimraf('./.tmp/css', done);\n});\n\ngulp.task('styles', ['clean-css'], function () {\n  return gulp.src([\n    './src/app/**/*.<%= styleData.extension %>',\n    '!./src/app/**/_*.<%= styleData.extension %>'\n  ])\n    .pipe(<%= styleData.pipeCommand %>)\n    .pipe(gulp.dest('./.tmp/css/'))\n    .pipe(g.cached('built-css'))\n    .pipe(livereload());\n});\n\ngulp.task('styles-dist', ['styles'], function () {\n  return cssFiles().pipe(dist('css', bower.name));\n});\n\ngulp.task('csslint', ['styles'], function () {\n  return cssFiles()\n    .pipe(g.cached('csslint'))\n    .pipe(g.csslint('./.csslintrc'))\n    .pipe(g.csslint.reporter());\n});\n<% if(coffee) { %>\n/**\n * CoffeeScript\n */\ngulp.task('coffee', function () {\n  return gulp.src([\n    './src/app/**/*.coffee'\n  ])\n    .pipe(g.coffee())\n    .pipe(gulp.dest('./.tmp/src/app'));\n});\n<% } %>\n/**\n * Scripts\n */\ngulp.task('scripts-dist', ['templates-dist'], function () {\n  return appFiles().pipe(dist('js', bower.name, {ngAnnotate: true}));\n});\n\n/**\n * Templates\n */\ngulp.task('templates', function () {\n  return templateFiles().pipe(buildTemplates());\n});\n\ngulp.task('templates-dist', function () {\n  return templateFiles({min: true}).pipe(buildTemplates());\n});\n\n/**\n * Vendors\n */\ngulp.task('vendors', function () {\n  var files = bowerFiles();\n  var vendorJs = fileTypeFilter(files, 'js');\n  var vendorCss = fileTypeFilter(files, 'css');\n  var q = new queue({objectMode: true});\n  if (vendorJs.length) {\n    q.queue(gulp.src(vendorJs).pipe(dist('js', 'vendors')));\n  }\n  if (vendorCss.length) {\n    q.queue(gulp.src(vendorCss).pipe(dist('css', 'vendors')));\n  }\n  return q.done();\n});\n\n/**\n * Index\n */\ngulp.task('index', index);\ngulp.task('build-all', ['styles', 'templates'<%if(coffee){%>, 'coffee'<%}%>], index);\n\nfunction index () {\n  var opt = {read: false};\n  return gulp.src('./src/app/index.html')\n    .pipe(g.inject(gulp.src(bowerFiles(), opt), {ignorePath: 'bower_components', starttag: '<!-- inject:vendor:{{ext}} -->'}))\n    .pipe(g.inject(es.merge(appFiles(), cssFiles(opt)), {ignorePath: ['.tmp', 'src/app']}))\n    .pipe(gulp.dest('./src/app/'))\n    .pipe(g.embedlr())\n    .pipe(gulp.dest('./.tmp/'))\n    .pipe(livereload());\n}\n\n/**\n * Assets\n */\ngulp.task('assets', function () {\n  return gulp.src('./src/app/assets/**')\n    .pipe(gulp.dest('./dist/assets'));\n});\n\n/**\n * Dist\n */\ngulp.task('dist', ['vendors', 'assets', 'styles-dist', 'scripts-dist'], function () {\n  return gulp.src('./src/app/index.html')\n    .pipe(g.inject(gulp.src('./dist/vendors.min.{js,css}'), {ignorePath: 'dist', starttag: '<!-- inject:vendor:{{ext}} -->'}))\n    .pipe(g.inject(gulp.src('./dist/' + bower.name + '.min.{js,css}'), {ignorePath: 'dist'}))\n    .pipe(g.htmlmin(htmlminOpts))\n    .pipe(gulp.dest('./dist/'));\n});\n\n/**\n * Static file server\n */\ngulp.task('statics', g.serve({\n  port: 3000,\n  root: ['./.tmp', './.tmp/src/app', './src/app', './bower_components']\n}));\n\n/**\n * Watch\n */\ngulp.task('serve', ['watch']);\ngulp.task('watch', ['statics', 'default'], function () {\n  isWatching = true;\n  // Initiate livereload server:\n  g.livereload.listen();<% if (coffee) { %>\n  gulp.watch('./src/app/**/*.coffee', ['coffee']);<% } %>\n  gulp.watch('./<% if (coffee) { %>.tmp/<% } %>src/app/**/*.js', ['jshint']).on('change', function (evt) {\n    if (evt.type !== 'changed') {\n      gulp.start('index');\n    } else {\n      g.livereload.changed(evt);\n    }\n  });\n  gulp.watch('./src/app/index.html', ['index']);\n  gulp.watch(['./src/app/**/*.html', '!./src/app/index.html'], ['templates']);\n  gulp.watch(['./src/app/**/*.<%= styleData.extension %>'], ['csslint']).on('change', function (evt) {\n    if (evt.type !== 'changed') {\n      gulp.start('index');\n    } else {\n      g.livereload.changed(evt);\n    }\n  });\n});\n\n/**\n * Default task\n */\ngulp.task('default', ['lint', 'build-all']);\n\n/**\n * Lint everything\n */\ngulp.task('lint', ['jshint', 'csslint']);\n\n/**\n * Test\n */\ngulp.task('test', ['templates'], function () {\n  return testFiles()\n    .pipe(g.karma({\n      configFile: 'karma.conf.js',\n      action: 'run'\n    }));\n});\n\n/**\n * Inject all files for tests into karma.conf.js\n * to be able to run `karma` without gulp.\n */\ngulp.task('karma-conf', ['templates'], function () {\n  return gulp.src('./karma.conf.js')\n    .pipe(g.inject(testFiles(), {\n      starttag: 'files: [',\n      endtag: ']',\n      addRootSlash: false,\n      transform: function (filepath, file, i, length) {\n        return '  \\'' + filepath + '\\'' + (i + 1 < length ? ',' : '');\n      }\n    }))\n    .pipe(gulp.dest('./'));\n});\n\n/**\n * Test files\n */\nfunction testFiles() {\n  return new queue({objectMode: true})\n    .queue(gulp.src(fileTypeFilter(bowerFiles(), 'js')))\n    .queue(gulp.src('./bower_components/angular-mocks/angular-mocks.js'))\n    .queue(appFiles())\n    .queue(gulp.src(['./src/app/**/*_test.js', './.tmp/src/app/**/*_test.js']))\n    .done();\n}\n\n/**\n * All CSS files as a stream\n */\nfunction cssFiles (opt) {\n  return gulp.src('./.tmp/css/**/*.css', opt);\n}\n\n/**\n * All AngularJS application files as a stream\n */\nfunction appFiles () {\n  var files = [\n    './.tmp/' + bower.name + '-templates.js',\n    './.tmp/src/app/**/*.js',\n    '!./.tmp/src/app/**/*_test.js',\n    './src/app/**/*.js',\n    '!./src/app/**/*_test.js'\n  ];\n  return gulp.src(files)\n    .pipe(g.angularFilesort());\n}\n\n/**\n * All AngularJS templates/partials as a stream\n */\nfunction templateFiles (opt) {\n  return gulp.src(['./src/app/**/*.html', '!./src/app/index.html'], opt)\n    .pipe(opt && opt.min ? g.htmlmin(htmlminOpts) : noop());\n}\n\n/**\n * Build AngularJS templates/partials\n */\nfunction buildTemplates () {\n  return lazypipe()\n    .pipe(g.ngHtml2js, {\n      moduleName: bower.name,\n      prefix: '/' + bower.name + '/',\n      stripPrefix: '/src/app'\n    })\n    .pipe(g.concat, bower.name + '-templates.js')\n    .pipe(gulp.dest, './.tmp')\n    .pipe(livereload)();\n}\n\n/**\n * Filter an array of files according to file type\n *\n * @param {Array} files\n * @param {String} extension\n * @return {Array}\n */\nfunction fileTypeFilter (files, extension) {\n  var regExp = new RegExp('\\\\.' + extension + '$');\n  return files.filter(regExp.test.bind(regExp));\n}\n\n/**\n * Concat, rename, minify\n *\n * @param {String} ext\n * @param {String} name\n * @param {Object} opt\n */\nfunction dist (ext, name, opt) {\n  opt = opt || {};\n  return lazypipe()\n    .pipe(g.concat, name + '.' + ext)\n    .pipe(gulp.dest, './dist')\n    .pipe(opt.ngAnnotate ? g.ngAnnotate : noop)\n    .pipe(opt.ngAnnotate ? g.rename : noop, name + '.annotated.' + ext)\n    .pipe(opt.ngAnnotate ? gulp.dest : noop, './dist')\n    .pipe(ext === 'js' ? g.uglify : g.minifyCss)\n    .pipe(g.rename, name + '.min.' + ext)\n    .pipe(gulp.dest, './dist')();\n}\n\n/**\n * Livereload (or noop if not run by watch)\n */\nfunction livereload () {\n  return lazypipe()\n    .pipe(isWatching ? g.livereload : noop)();\n}\n\n/**\n * Jshint with stylish reporter\n */\nfunction jshint (jshintfile) {\n  return lazypipe()\n    .pipe(g.jshint, jshintfile)\n    .pipe(g.jshint.reporter, stylish)();\n}\n","/home/travis/build/npmtest/node-npmtest-slush-angular/node_modules/slush-angular/templates/karma.conf.js":"\nmodule.exports = function ( karma ) {\n  process.env.PHANTOMJS_BIN = 'node_modules/karma-phantomjs-launcher/node_modules/.bin/phantomjs';\n\n  karma.set({\n    /**\n     * From where to look for files, starting with the location of this file.\n     */\n    basePath: './',\n\n    /**\n     * Filled by the task `gulp karma-conf`\n     */\n    files: [\n    ],\n\n    frameworks: [ 'mocha', 'chai' ],\n    plugins: [ 'karma-mocha', 'karma-chai', 'karma-phantomjs-launcher' ],\n\n    /**\n     * How to report, by default.\n     */\n    reporters: 'progress',\n\n    /**\n     * Show colors in output?\n     */\n    colors: true,\n\n    /**\n     * On which port should the browser connect, on which port is the test runner\n     * operating, and what is the URL path for the browser to use.\n     */\n    port: 9099,\n    runnerPort: 9100,\n    urlRoot: '/',\n\n    /**\n     * Disable file watching by default.\n     */\n    autoWatch: false,\n\n    /**\n     * The list of browsers to launch to test on. This includes only \"Firefox\" by\n     * default, but other browser names include:\n     * Chrome, ChromeCanary, Firefox, Opera, Safari, PhantomJS\n     *\n     * Note that you can also use the executable name of the browser, like \"chromium\"\n     * or \"firefox\", but that these vary based on your operating system.\n     *\n     * You may also leave this blank and manually navigate your browser to\n     * http://localhost:9099/ when you're running tests. The window/tab can be left\n     * open and the tests will automatically occur there during the build. This has\n     * the aesthetic advantage of not launching a browser every time you save.\n     */\n    browsers: [\n      'PhantomJS'\n    ]\n  });\n};\n"}